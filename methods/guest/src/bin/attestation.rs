// Copyright 2023 RISC Zero, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

use std::io::Read;

use appattest_rs::attestation::Attestation;
use risc0_zkvm::guest::env;

fn main() {
    // Read the input data for this application.
    let mut input_bytes = Vec::<u8>::new();
    env::stdin().read_to_end(&mut input_bytes).unwrap();
    // Decode and parse the input
    assert_eq!(input_bytes.len(), 8, "Expected exactly 8 bytes for i64 input");
    
    // Convert to array and interpret as i64 (assume little-endian)
    let timestamp = i64::from_le_bytes(input_bytes[..8].try_into().unwrap());
    
    let app_id = "LMRM26A744.xyz.elus.aegis.app-attester"; // replace this with yours. E.g 9000738UU8.auth.iphone.com
    let key_id = "HD8zVqwgesSBwPaYj5icRg1GI/b6SOoa4TqieTEBA0g=";
    let base64_challenge = "ExYiYJ4jA3rGL9oQN8ihDP4seccnxwHSEU28u8aCQaU=";
    let base64_cbor_data = "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";

    // Convert from base64 CBOR to Assertion
    let attestation_result = Attestation::from_base64(base64_cbor_data);
    
    match attestation_result {
        Ok(attestation) => {
            match attestation.verify(&base64_challenge, app_id, key_id, timestamp, Some(true)) {
                Ok(_) => println!("Attestation verification successful!"),
                Err(e) => println!("Attestation verification failed: {:?}", e),
            }
        },
        Err(e) => println!("Failed to decode and create attestation: {:?}", e),
    }
}
